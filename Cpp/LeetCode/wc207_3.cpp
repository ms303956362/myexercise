#include "usual.h"

class Solution {
    long long pos[20][20];
    long long neg[20][20];

public:
    int maxProductPath(vector<vector<int>>& grid) {
        long long MOD = 1e9 + 7;
        for (int i = 0; i != 20; ++i)
            for (int j = 0; j != 20; ++j) {
                neg[i][j] = 1; // min neg prod
                pos[i][j] = -1;// max pos prod
            }
        int n = grid.size(), m = grid[0].size();
        pos[n - 1][m - 1] = (grid[n - 1][m - 1] >= 0 ? grid[n - 1][m - 1] : -1);
        neg[n - 1][m - 1] = (grid[n - 1][m - 1] <= 0 ? grid[n - 1][m - 1] : 1);
        for (int i = n - 1; i >= 0; --i) {
            for (int j = (i == n - 1 ? m - 2 : m - 1); j >= 0; --j) {
                if (grid[i][j] >= 0) {
                    pos[i][j] = (max(pos[i + 1][j], pos[i][j + 1]) * grid[i][j]) % MOD;
                    neg[i][j] = (min(neg[i + 1][j], neg[i][j + 1]) * grid[i][j]) % MOD;
                } else {
                    neg[i][j] = (max(pos[i + 1][j], pos[i][j + 1]) * grid[i][j]) % MOD;
                    pos[i][j] = (min(neg[i + 1][j], neg[i][j + 1]) * grid[i][j]) % MOD;
                }
            }
        }
        return pos[0][0] >= 0 ? pos[0][0] : -1;
    }
};


/*
[1,-2,-2,4,1,-4,0,0,4,1,0,0,-4],
[-2,1,-3,3,-1,-1,0,-4,-4,-4,3,-3,-1],
[-2,1,-2,0,4,3,2,-2,2,-3,2,2,-1],
[2,0,4,-2,-4,-1,2,1,1,2,-2,-1,1],
[-3,-3,-2,2,-4,4,0,-3,-1,-4,-2,3,0],
[-2,-4,-3,-2,3,-1,3,2,-2,-1,2,4,-4],
[0,3,3,-2,-3,-2,-4,0,2,0,3,-2,-3],
[-4,-1,0,2,-4,2,-2,2,0,-3,1,3,-2],
[-2,1,4,-3,1,-1,-4,2,-4,1,4,0,-3],
[1,4,1,-1,0,-3,1,-4,3,3,-2,-1,4]]
*/
int main(int argc, char const *argv[])
{
    vector<vector<int>> grid{{1,-2,-2,4,1,-4,0,0,4,1,0,0,-4},{-2,1,-3,3,-1,-1,0,-4,-4,-4,3,-3,-1},{-2,1,-2,0,4,3,2,-2,2,-3,2,2,-1},{2,0,4,-2,-4,-1,2,1,1,2,-2,-1,1},{-3,-3,-2,2,-4,4,0,-3,-1,-4,-2,3,0},{-2,-4,-3,-2,3,-1,3,2,-2,-1,2,4,-4},{0,3,3,-2,-3,-2,-4,0,2,0,3,-2,-3},{-4,-1,0,2,-4,2,-2,2,0,-3,1,3,-2},{-2,1,4,-3,1,-1,-4,2,-4,1,4,0,-3},{1,4,1,-1,0,-3,1,-4,3,3,-2,-1,4}};
    Solution().maxProductPath(grid);
    return 0;
}
